import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../../app/store'
import { Exercise, Workout } from './model'

export interface WorkoutState {
  workouts: Workout[],
  currentWorkout?: Workout | null,
  currentExercise?: Exercise | null,
  status: 'idle' | 'loading' | 'failed'
}

const initialState: WorkoutState = {
  workouts: [],
  status: 'idle',
}


export const workoutSlice = createSlice({
  name: 'workouts',
  initialState,
  reducers: {
    addWorkout: (state, action: PayloadAction<Workout>) => {
      console.log("addWorkout", state, action, action.payload);
      state.workouts.push(action.payload);
    },
    setSelectedWorkout: (state, action: PayloadAction<Workout>) => {
      console.log("selectedWorkout", state, action, action.payload);
      state.currentWorkout = action.payload;
    },
    unselectWorkout: (state, action: PayloadAction) => {
      console.log("unselectWorkout", state, action, action.payload);
      state.currentWorkout = null;
    },
    removeWorkout: (state, action: PayloadAction<Workout>) => {
      const rw = action.payload;
      const newState = state.workouts.filter(workout=> workout.workoutType === rw.workoutType && 
        workout.time === rw.time);
      state.workouts.splice(0,state.workouts.length);
      state.workouts.push(...newState);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading'
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle'
//         state.value += action.payload
//       })
//   },
})

export const { addWorkout, setSelectedWorkout, 
  removeWorkout, unselectWorkout } = workoutSlice.actions


export const selectWorkouts = (state: AppState) => state.workouts.workouts
export const selectCurrentWorkout = (state: AppState) => state.workouts.currentWorkout

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState())
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount))
//     }
//   }

export default workoutSlice.reducer